config CPU_FREQ_GOV_LULZACTIVE2
	tristate "'lulzactive' cpufreq governor"
	depends on CPU_FREQ
	help
	  When workload is greater than or equal to 60%, the 
	  governor scales up CPU to next higher step. When 
	  workload is less than 60%, governor scales down CPU
	  to next lower step. When screen is off, frequency is
	  locked to global scaling minimum frequency.

config CPU_FREQ_GOV_SMARTASS2
	tristate "'smartassV2' cpufreq governor"
	depends on CPU_FREQ
	help
	SmartassV2 is a governor (controls the frequency of the 
	CPU at each give moment) which like the first smartass is 
	generally based on the implementation of interactive with
	some major changes and the addition of a built in sleep
	profile (behaves a bit differently when screen is off vs. on).
	The smartassV2 improves the very naive scheme which the first
	smartass had

config CPU_FREQ_GOV_WHEATLEY
	tristate "'wheatley' cpufreq governor"
	depends on CPU_FREQ
     ---help---
	Building on the classic 'ondemand' governor is implemented Wheatley
	governor. The governor has two additional parameters that control
	the state.

config CPU_FREQ_GOV_LAGFREE
        tristate "'lagfree' cpufreq governor"
        depends on CPU_FREQ
        ---help---
	Lagfree is similar to ondemand. Main difference is it's optimization
	to become more battery friendly. Frequency is gracefully decreased and
	increased, unlike ondemand which jumps to 100% too often. Lagfree does
	not skip any frequency step while scaling up or down. Remember that if
	there's a requirement for sudden burst of power, lagfree can not satisfy
	that since it has to raise cpu through each higher frequency step from
	current. Some users report that video playback using lagfree stutters a little.
  
config CPU_FREQ_GOV_LIONHEART
	tristate "'lionheart' cpufreq policy governor"
	depends on CPU_FREQ
	---help---
	Lionheart is a conservative-based governor which is based on samsung
	update3 source. The tunables (such as the thresholds and sampling rate)
	were changed so the governor behaves more like the performance one, at
	the cost of battery as the scaling is very aggressive.

config CPU_FREQ_GOV_LIONFISH
	tristate "'lionfish' governor"
	depends on CPU_FREQ
	help
	  'lionfish' - this is an improved version of the conservative governor
	  that is optimized for smartphones. To avoid lag, it quickly jumps
	  to an intermediate frequency when high load is encountered at low
	  frequencies. If very high load is encountered above this intermediate
	  frequency, it jumps to a high frequency. For moderate loads, it
	  votes to increase, decrease, or maintain frequencies at each sampling
	  interval. When enough votes are gathered to raise or lower the
	  frequency, the frequency is changed. This mechanism reduces jitter
	  compared to the conservative governor. Lionfish uses proportional
	  ramping to more quickly reach suitable frequencies compared to the
	  conservative governor. By default, Lionfish also reduces frequencies
	  more aggressively than the conservative governor when loads are reduced.

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_lionfish.

	  If in doubt, say N.
